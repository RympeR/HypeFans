{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\develop\\\\pypr\\\\HypeFans\\\\mobile_version\\\\App.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport AppLoading from 'expo-app-loading';\nimport { Asset } from 'expo-asset';\nimport * as Font from 'expo-font';\nimport React, { useState, useEffect } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { Ionicons } from '@expo/vector-icons';\nimport StartScreen from \"./screens/start/StartScreen\";\nimport MainScreen from \"./screens/main/MainScreen\";\nimport s from \"./styles/style\";\nexport default function App(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoadingComplete = _useState2[0],\n      setLoadingComplete = _useState2[1];\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      screen = _React$useState2[0],\n      getScreen = _React$useState2[1];\n\n  var _React$useState3 = React.useState(true),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      color = _React$useState4[0],\n      getColor = _React$useState4[1];\n\n  var _React$useState5 = React.useState(1),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      lang = _React$useState6[0],\n      getLang = _React$useState6[1];\n\n  AsyncStorage.getItem('color', function (err, result) {\n    switch (result) {\n      case 'true':\n        getColor(true);\n        break;\n\n      case 'false':\n        getColor(false);\n        break;\n\n      default:\n        getColor(true);\n    }\n  });\n  AsyncStorage.getItem('lang', function (err, result) {\n    switch (result) {\n      case '0':\n        getLang(0);\n        break;\n\n      case '1':\n        getLang(1);\n        break;\n\n      case '2':\n        getLang(2);\n        break;\n\n      default:\n        getLang(1);\n    }\n  });\n  React.useEffect(function () {});\n\n  var askPerm = function askPerm() {\n    return _regeneratorRuntime.async(function askPerm$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.CAMERA_ROLL));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  if (!isLoadingComplete && !props.skipLoadingScreen) {\n    return React.createElement(AppLoading, {\n      startAsync: loadResourcesAsync,\n      onError: handleLoadingError,\n      onFinish: function onFinish() {\n        return handleFinishLoading(setLoadingComplete, getColor);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }\n    });\n  } else {\n    return React.createElement(View, {\n      style: s.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }\n    }, screen ? React.createElement(StartScreen, {\n      lang: lang,\n      onLangChange: function onLangChange(langId) {\n        AsyncStorage.setItem('lang', String(langId), function () {\n          return getLang(langId);\n        });\n      },\n      onMainScreen: function onMainScreen() {\n        return getScreen(false);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 15\n      }\n    }) : React.createElement(MainScreen, {\n      lang: lang,\n      onLangChange: function onLangChange(langId) {\n        AsyncStorage.setItem('lang', String(langId), function () {\n          return getLang(langId);\n        });\n      },\n      onExit: function onExit() {\n        return getScreen(true);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }\n    }), React.createElement(StatusBar, {\n      hidden: false,\n      barStyle: \"dark-content\",\n      translucent: true,\n      backgroundColor: 'transparent',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }\n    }));\n  }\n}\n\nfunction loadResourcesAsync() {\n  return _regeneratorRuntime.async(function loadResourcesAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(Promise.all([Asset.loadAsync([require(\"./assets/images/logo.png\"), require(\"./assets/images/home.svg\"), require(\"./assets/images/homeN.svg\"), require(\"./assets/images/bell.svg\"), require(\"./assets/images/bellN.svg\"), require(\"./assets/images/plus-circle.svg\"), require(\"./assets/images/plus-circleN.svg\"), require(\"./assets/images/message-square.svg\"), require(\"./assets/images/message-squareN.svg\"), require(\"./assets/images/user.svg\"), require(\"./assets/images/userN.svg\")]), Font.loadAsync({\n            'factor_a': require(\"./assets/fonts/FactorA-Regular.ttf\"),\n            'factor_a_bold': require(\"./assets/fonts/FactorA-Bold.ttf\"),\n            'factor_a_medium': require(\"./assets/fonts/FactorAMedium-Regular.ttf\"),\n            'factor_a_light': require(\"./assets/fonts/FactorALight-Regular.ttf\"),\n            'monda': require(\"./assets/fonts/Monda-Regular.ttf\")\n          })]));\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction handleLoadingError(error) {\n  console.warn(error);\n}\n\nfunction handleFinishLoading(setLoadingComplete) {\n  setLoadingComplete(true);\n}","map":{"version":3,"sources":["D:/develop/pypr/HypeFans/mobile_version/App.js"],"names":["AppLoading","Asset","Font","React","useState","useEffect","AsyncStorage","Ionicons","StartScreen","MainScreen","s","App","props","isLoadingComplete","setLoadingComplete","screen","getScreen","color","getColor","lang","getLang","getItem","err","result","askPerm","Permissions","askAsync","CAMERA_ROLL","skipLoadingScreen","loadResourcesAsync","handleLoadingError","handleFinishLoading","container","langId","setItem","String","Promise","all","loadAsync","require","error","console","warn"],"mappings":"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","sourcesContent":["import AppLoading from 'expo-app-loading';\r\nimport { Asset } from 'expo-asset';\r\nimport * as Font from 'expo-font';\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n  Platform, StatusBar, StyleSheet, View, Text,\r\n  TouchableWithoutFeedback,\r\n  Keyboard\r\n} from 'react-native';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage'\r\nimport { Ionicons } from '@expo/vector-icons';\r\n\r\n\r\n//import * as ImagePicker from 'expo-image-picker';\r\n//import * as Permissions from 'expo-permissions';\r\n\r\nimport StartScreen from './screens/start/StartScreen';\r\nimport MainScreen from './screens/main/MainScreen';\r\n//import Navigator from './screens/Navigator';\r\n\r\n\r\n\r\nimport s from './styles/style'\r\n\r\n\r\nexport default function App(props) {\r\n  const [isLoadingComplete, setLoadingComplete] = useState(false);\r\n  let [screen, getScreen] = React.useState(false)\r\n  let [color, getColor] = React.useState(true)\r\n  let [lang, getLang] = React.useState(1)\r\n\r\n\r\n  // ------ settings ---------------------------------\r\n  AsyncStorage.getItem('color', (err, result) => {\r\n    switch (result) {\r\n      case 'true': getColor(true)\r\n        break\r\n      case 'false': getColor(false)\r\n        break\r\n      default: getColor(true)\r\n    }\r\n  })\r\n  AsyncStorage.getItem('lang', (err, result) => {\r\n    switch (result) {\r\n      case '0': getLang(0)\r\n        break\r\n      case '1': getLang(1) //rus\r\n        break\r\n      case '2': getLang(2)\r\n        break\r\n      default: getLang(1)\r\n    }\r\n  })\r\n  // --------------------------------------------------\r\n  // componentDidMount & componentDidUpdate:\r\n  React.useEffect(() => {\r\n    // askPerm()\r\n  })\r\n\r\n  let askPerm = async () => {\r\n    await Permissions.askAsync(Permissions.CAMERA_ROLL);\r\n    // await Permissions.askAsync(Permissions.CAMERA);\r\n  }\r\n\r\n  // ----------------------------\r\n\r\n  if (!isLoadingComplete && !props.skipLoadingScreen) {\r\n    return (\r\n      <AppLoading\r\n        startAsync={loadResourcesAsync}\r\n        onError={handleLoadingError}\r\n        onFinish={() => handleFinishLoading(setLoadingComplete, getColor)}\r\n      />\r\n    );\r\n  } else {\r\n    return (\r\n      <View style={s.container}>\r\n\r\n        {/* status bar margin */}\r\n        {/* <View style={[s.marginStatusBar, {\r\n          //backgroundColor: '#fff'\r\n        }]} /> */}\r\n\r\n        {\r\n          screen\r\n            ? <StartScreen\r\n              lang={lang}\r\n              onLangChange={(langId) => {\r\n                AsyncStorage.setItem('lang', String(langId), () => getLang(langId))\r\n              }}\r\n              onMainScreen={() => getScreen(false)}\r\n            />\r\n            :\r\n            <MainScreen\r\n              lang={lang}\r\n              onLangChange={(langId) => {\r\n                AsyncStorage.setItem('lang', String(langId), () => getLang(langId))\r\n              }}\r\n              onExit={() => getScreen(true)}\r\n            />\r\n        }\r\n        <StatusBar hidden={false}\r\n          barStyle=\"dark-content\"\r\n          translucent={true}\r\n          backgroundColor={'transparent'}\r\n          //backgroundColor={'#fff'}\r\n        />\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nasync function loadResourcesAsync() {\r\n  await Promise.all([\r\n    Asset.loadAsync([\r\n      require('./assets/images/logo.png'),\r\n      require('./assets/images/home.svg'),\r\n      require('./assets/images/homeN.svg'),\r\n      require('./assets/images/bell.svg'),\r\n      require('./assets/images/bellN.svg'),\r\n      require('./assets/images/plus-circle.svg'),\r\n      require('./assets/images/plus-circleN.svg'),\r\n      require('./assets/images/message-square.svg'),\r\n      require('./assets/images/message-squareN.svg'),\r\n      require('./assets/images/user.svg'),\r\n      require('./assets/images/userN.svg'),\r\n\r\n    ]),\r\n    Font.loadAsync({\r\n      'factor_a': require('./assets/fonts/FactorA-Regular.ttf'),\r\n      'factor_a_bold': require('./assets/fonts/FactorA-Bold.ttf'),\r\n      'factor_a_medium': require('./assets/fonts/FactorAMedium-Regular.ttf'),\r\n      'factor_a_light': require('./assets/fonts/FactorALight-Regular.ttf'),\r\n      'monda': require('./assets/fonts/Monda-Regular.ttf'),\r\n    }),\r\n  ]);\r\n}\r\n\r\nfunction handleLoadingError(error) {\r\n  // In this case, you might want to report the error to your error reporting\r\n  // service, for example Sentry\r\n  console.warn(error);\r\n}\r\n\r\nfunction handleFinishLoading(setLoadingComplete) {\r\n  setLoadingComplete(true);\r\n}\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}