{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport var camelCase = function camelCase(value) {\n  return value.replace(/-([a-z])/g, function (g) {\n    return g[1].toUpperCase();\n  });\n};\nexport var camelCaseNodeName = function camelCaseNodeName(_ref) {\n  var nodeName = _ref.nodeName,\n      nodeValue = _ref.nodeValue;\n  return {\n    nodeName: camelCase(nodeName),\n    nodeValue: nodeValue\n  };\n};\nexport var removePixelsFromNodeValue = function removePixelsFromNodeValue(_ref2) {\n  var nodeName = _ref2.nodeName,\n      nodeValue = _ref2.nodeValue;\n  return {\n    nodeName: nodeName,\n    nodeValue: nodeValue.replace(\"px\", \"\")\n  };\n};\nexport var transformStyle = function transformStyle(_ref3) {\n  var nodeName = _ref3.nodeName,\n      nodeValue = _ref3.nodeValue,\n      fillProp = _ref3.fillProp;\n\n  if (nodeName === \"style\") {\n    return nodeValue.split(\";\").reduce(function (acc, attribute) {\n      var _attribute$split = attribute.split(\":\"),\n          _attribute$split2 = _slicedToArray(_attribute$split, 2),\n          property = _attribute$split2[0],\n          value = _attribute$split2[1];\n\n      if (property == \"\") return acc;else return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, camelCase(property), fillProp && property === \"fill\" ? fillProp : value));\n    }, {});\n  }\n\n  return null;\n};\nexport var getEnabledAttributes = function getEnabledAttributes(enabledAttributes) {\n  return function (_ref4) {\n    var nodeName = _ref4.nodeName;\n    return enabledAttributes.includes(camelCase(nodeName));\n  };\n};","map":{"version":3,"sources":["D:/develop/pypr/HypeFans/mobile_version/node_modules/expo-svg-uri/utils.js"],"names":["camelCase","value","replace","g","toUpperCase","camelCaseNodeName","nodeName","nodeValue","removePixelsFromNodeValue","transformStyle","fillProp","split","reduce","acc","attribute","property","getEnabledAttributes","enabledAttributes","includes"],"mappings":";;;;;;;AAAA,OAAO,IAAMA,SAAS,GAAG,SAAZA,SAAY,CAAAC,KAAK;AAAA,SAC5BA,KAAK,CAACC,OAAN,CAAc,WAAd,EAA2B,UAAAC,CAAC;AAAA,WAAIA,CAAC,CAAC,CAAD,CAAD,CAAKC,WAAL,EAAJ;AAAA,GAA5B,CAD4B;AAAA,CAAvB;AAGP,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB;AAAA,MAAGC,QAAH,QAAGA,QAAH;AAAA,MAAaC,SAAb,QAAaA,SAAb;AAAA,SAA8B;AAC7DD,IAAAA,QAAQ,EAAEN,SAAS,CAACM,QAAD,CAD0C;AAE7DC,IAAAA,SAAS,EAATA;AAF6D,GAA9B;AAAA,CAA1B;AAKP,OAAO,IAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B;AAAA,MAAGF,QAAH,SAAGA,QAAH;AAAA,MAAaC,SAAb,SAAaA,SAAb;AAAA,SAA8B;AACrED,IAAAA,QAAQ,EAARA,QADqE;AAErEC,IAAAA,SAAS,EAAEA,SAAS,CAACL,OAAV,CAAkB,IAAlB,EAAwB,EAAxB;AAF0D,GAA9B;AAAA,CAAlC;AAKP,OAAO,IAAMO,cAAc,GAAG,SAAjBA,cAAiB,QAAuC;AAAA,MAApCH,QAAoC,SAApCA,QAAoC;AAAA,MAA1BC,SAA0B,SAA1BA,SAA0B;AAAA,MAAfG,QAAe,SAAfA,QAAe;;AACnE,MAAIJ,QAAQ,KAAK,OAAjB,EAA0B;AACxB,WAAOC,SAAS,CAACI,KAAV,CAAgB,GAAhB,EAAqBC,MAArB,CAA4B,UAACC,GAAD,EAAMC,SAAN,EAAoB;AAAA,6BAC3BA,SAAS,CAACH,KAAV,CAAgB,GAAhB,CAD2B;AAAA;AAAA,UAC9CI,QAD8C;AAAA,UACpCd,KADoC;;AAErD,UAAIc,QAAQ,IAAI,EAAhB,EAAoB,OAAOF,GAAP,CAApB,KAEE,uCACKA,GADL,2BAEGb,SAAS,CAACe,QAAD,CAFZ,EAGIL,QAAQ,IAAIK,QAAQ,KAAK,MAAzB,GAAkCL,QAAlC,GAA6CT,KAHjD;AAKH,KATM,EASJ,EATI,CAAP;AAUD;;AACD,SAAO,IAAP;AACD,CAdM;AAgBP,OAAO,IAAMe,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAAC,iBAAiB;AAAA,SAAI;AAAA,QAAGX,QAAH,SAAGA,QAAH;AAAA,WACvDW,iBAAiB,CAACC,QAAlB,CAA2BlB,SAAS,CAACM,QAAD,CAApC,CADuD;AAAA,GAAJ;AAAA,CAA9C","sourcesContent":["export const camelCase = value =>\n  value.replace(/-([a-z])/g, g => g[1].toUpperCase());\n\nexport const camelCaseNodeName = ({ nodeName, nodeValue }) => ({\n  nodeName: camelCase(nodeName),\n  nodeValue\n});\n\nexport const removePixelsFromNodeValue = ({ nodeName, nodeValue }) => ({\n  nodeName,\n  nodeValue: nodeValue.replace(\"px\", \"\")\n});\n\nexport const transformStyle = ({ nodeName, nodeValue, fillProp }) => {\n  if (nodeName === \"style\") {\n    return nodeValue.split(\";\").reduce((acc, attribute) => {\n      const [property, value] = attribute.split(\":\");\n      if (property == \"\") return acc;\n      else\n        return {\n          ...acc,\n          [camelCase(property)]:\n            fillProp && property === \"fill\" ? fillProp : value\n        };\n    }, {});\n  }\n  return null;\n};\n\nexport const getEnabledAttributes = enabledAttributes => ({ nodeName }) =>\n  enabledAttributes.includes(camelCase(nodeName));\n"]},"metadata":{},"sourceType":"module"}