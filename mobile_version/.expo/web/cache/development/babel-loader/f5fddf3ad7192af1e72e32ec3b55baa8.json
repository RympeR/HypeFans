{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nvar _jsxFileName = \"D:\\\\develop\\\\pypr\\\\HypeFans\\\\mobile_version\\\\node_modules\\\\expo-image-editor\\\\lib\\\\OperationBar\\\\Blur.js\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Blur = void 0;\n\nvar React = __importStar(require(\"react\"));\n\nvar react_native_1 = require(\"react-native-web/dist/index\");\n\nvar recoil_1 = require(\"recoil\");\n\nvar IconButton_1 = require(\"../components/IconButton\");\n\nvar Store_1 = require(\"../Store\");\n\nvar react_native_slider_1 = require(\"@miblanchard/react-native-slider\");\n\nvar expo_asset_1 = require(\"expo-asset\");\n\nvar expo_gl_1 = require(\"expo-gl\");\n\nvar ImageManinpulator = __importStar(require(\"expo-image-manipulator\"));\n\nvar FileSystem = __importStar(require(\"expo-file-system\"));\n\nvar lodash_1 = require(\"lodash\");\n\nvar vertShader = \"\\nprecision highp float;\\nattribute vec2 position;\\nvarying vec2 uv;\\nvoid main () {\\n  uv = position;\\n  gl_Position = vec4(1.0 - 2.0 * uv, 0, 1);\\n}\";\nvar fragShader = \"\\nprecision highp float;\\nprecision highp int;\\nuniform sampler2D texture;\\nuniform highp float width;\\nuniform highp float height;\\nvarying vec2 uv;\\nuniform highp int radius;\\nuniform highp int pass;\\nuniform highp float pixelFrequency;\\nfloat gauss (float sigma, float x) {\\n  float g = (1.0/sqrt(2.0*3.142*sigma*sigma))*exp(-0.5*(x*x)/(sigma*sigma));\\n  return g;\\n}\\nvoid main () {\\n  float f_radius = float(radius);\\n  float sigma = (0.5 * f_radius);\\n  // Get the color of the fragment pixel\\n  vec4 color = texture2D(texture, vec2(uv.x, uv.y));\\n  color *= gauss(sigma, 0.0);\\n  // Loop over the neightbouring pixels\\n  for (int i = -30; i <= 30; i++) {\\n    // Make sure we don't include the main pixel which we already sampled!\\n    if (i != 0) {\\n      // Check we are on an index that doesn't exceed the blur radius specified\\n      if (i >= -radius && i <= radius) {\\n        float index = float(i);\\n        // Caclulate the current pixel index\\n        float pixelIndex = 0.0;\\n        if (pass == 0) {\\n          pixelIndex = (uv.y) * height;\\n        }\\n        else {\\n          pixelIndex = uv.x * width;\\n        }\\n        // Get the neighbouring pixel index\\n        float offset = index * pixelFrequency;\\n        pixelIndex += offset;\\n        // Normalise the new index back into the 0.0 to 1.0 range\\n        if (pass == 0) {\\n          pixelIndex /= height;\\n        }\\n        else {\\n          pixelIndex /= width;\\n        }\\n        // Pad the UV \\n        if (pixelIndex < 0.0) {\\n          pixelIndex = 0.0;\\n        }\\n        if (pixelIndex > 1.0) {\\n          pixelIndex = 1.0;\\n        }\\n        // Get gaussian amplitude\\n        float g = gauss(sigma, index);\\n        // Get the color of neighbouring pixel\\n        vec4 previousColor = vec4(0.0, 0.0, 0.0, 0.0);\\n        if (pass == 0) {\\n          previousColor = texture2D(texture, vec2(uv.x, pixelIndex)) * g;\\n        }\\n        else {\\n          previousColor = texture2D(texture, vec2(pixelIndex, uv.y)) * g;\\n        }\\n        color += previousColor;\\n      }\\n    }\\n  }\\n  // Return the resulting color\\n  gl_FragColor = color;\\n}\";\n\nfunction Blur() {\n  var _this = this;\n\n  var _recoil_1$useRecoilSt = recoil_1.useRecoilState(Store_1.processingState),\n      _recoil_1$useRecoilSt2 = _slicedToArray(_recoil_1$useRecoilSt, 2),\n      setProcessing = _recoil_1$useRecoilSt2[1];\n\n  var _recoil_1$useRecoilSt3 = recoil_1.useRecoilState(Store_1.imageDataState),\n      _recoil_1$useRecoilSt4 = _slicedToArray(_recoil_1$useRecoilSt3, 2),\n      imageData = _recoil_1$useRecoilSt4[0],\n      setImageData = _recoil_1$useRecoilSt4[1];\n\n  var _recoil_1$useRecoilSt5 = recoil_1.useRecoilState(Store_1.editingModeState),\n      _recoil_1$useRecoilSt6 = _slicedToArray(_recoil_1$useRecoilSt5, 2),\n      setEditingMode = _recoil_1$useRecoilSt6[1];\n\n  var _recoil_1$useRecoilSt7 = recoil_1.useRecoilState(Store_1.glContextState),\n      _recoil_1$useRecoilSt8 = _slicedToArray(_recoil_1$useRecoilSt7, 2),\n      glContext = _recoil_1$useRecoilSt8[0],\n      setGLContext = _recoil_1$useRecoilSt8[1];\n\n  var _recoil_1$useRecoilSt9 = recoil_1.useRecoilState(Store_1.imageBoundsState),\n      _recoil_1$useRecoilSt10 = _slicedToArray(_recoil_1$useRecoilSt9, 1),\n      imageBounds = _recoil_1$useRecoilSt10[0];\n\n  var _recoil_1$useRecoilSt11 = recoil_1.useRecoilState(Store_1.throttleBlurState),\n      _recoil_1$useRecoilSt12 = _slicedToArray(_recoil_1$useRecoilSt11, 1),\n      throttleBlur = _recoil_1$useRecoilSt12[0];\n\n  var _React$useState = React.useState(15),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      sliderValue = _React$useState2[0],\n      setSliderValue = _React$useState2[1];\n\n  var _React$useState3 = React.useState(15),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      blur = _React$useState4[0],\n      setBlur = _React$useState4[1];\n\n  var _React$useState5 = React.useState(null),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      glProgram = _React$useState6[0],\n      setGLProgram = _React$useState6[1];\n\n  var onClose = function onClose() {\n    setGLContext(null);\n    setEditingMode(\"operation-select\");\n  };\n\n  var onSaveWithBlur = function onSaveWithBlur() {\n    return __awaiter(_this, void 0, void 0, _regeneratorRuntime.mark(function _callee2() {\n      var _this2 = this;\n\n      var gl, output, fileReaderInstance, flippedOutput;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              setProcessing(true);\n              gl = glContext;\n              gl.drawArrays(gl.TRIANGLES, 0, 6);\n              _context2.next = 5;\n              return expo_gl_1.GLView.takeSnapshotAsync(gl);\n\n            case 5:\n              output = _context2.sent;\n\n              if (!(react_native_1.Platform.OS === \"web\")) {\n                _context2.next = 12;\n                break;\n              }\n\n              fileReaderInstance = new FileReader();\n              fileReaderInstance.readAsDataURL(output.uri);\n\n              fileReaderInstance.onload = function () {\n                return __awaiter(_this2, void 0, void 0, _regeneratorRuntime.mark(function _callee() {\n                  var base64data, flippedOutput;\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          base64data = fileReaderInstance.result;\n                          _context.next = 3;\n                          return ImageManinpulator.manipulateAsync(base64data, [{\n                            flip: ImageManinpulator.FlipType.Vertical\n                          }]);\n\n                        case 3:\n                          flippedOutput = _context.sent;\n                          setImageData({\n                            uri: flippedOutput.uri,\n                            width: flippedOutput.width,\n                            height: flippedOutput.height\n                          });\n\n                        case 5:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n              };\n\n              _context2.next = 16;\n              break;\n\n            case 12:\n              _context2.next = 14;\n              return ImageManinpulator.manipulateAsync(output.uri, [{\n                flip: ImageManinpulator.FlipType.Vertical\n              }]);\n\n            case 14:\n              flippedOutput = _context2.sent;\n              setImageData({\n                uri: flippedOutput.uri,\n                width: flippedOutput.width,\n                height: flippedOutput.height\n              });\n\n            case 16:\n              setProcessing(false);\n              setGLContext(null);\n              setTimeout(function () {\n                setEditingMode(\"operation-select\");\n              }, 100);\n\n            case 19:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n  };\n\n  React.useEffect(function () {\n    if (glContext !== null) {\n      var setupGL = function setupGL() {\n        return __awaiter(_this, void 0, void 0, _regeneratorRuntime.mark(function _callee3() {\n          var gl, asset, vert, frag, program, buffer, verts, positionAttrib, texture, pixelFrequency;\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  gl = glContext;\n\n                  if (!(react_native_1.Platform.OS !== \"web\")) {\n                    _context3.next = 8;\n                    break;\n                  }\n\n                  asset = {\n                    uri: imageData.uri,\n                    localUri: imageData.uri,\n                    height: imageData.height,\n                    width: imageData.width\n                  };\n                  _context3.next = 5;\n                  return FileSystem.copyAsync({\n                    from: asset.uri,\n                    to: FileSystem.cacheDirectory + \"blur.jpg\"\n                  });\n\n                case 5:\n                  asset.localUri = FileSystem.cacheDirectory + \"blur.jpg\";\n                  _context3.next = 11;\n                  break;\n\n                case 8:\n                  asset = expo_asset_1.Asset.fromURI(imageData.uri);\n                  _context3.next = 11;\n                  return asset.downloadAsync();\n\n                case 11:\n                  if (asset.width && asset.height) {\n                    vert = gl.createShader(gl.VERTEX_SHADER);\n                    frag = gl.createShader(gl.FRAGMENT_SHADER);\n\n                    if (vert && frag) {\n                      gl.shaderSource(vert, vertShader);\n                      gl.compileShader(vert);\n                      gl.shaderSource(frag, fragShader);\n                      gl.compileShader(frag);\n                      program = gl.createProgram();\n\n                      if (program) {\n                        gl.attachShader(program, vert);\n                        gl.attachShader(program, frag);\n                        gl.linkProgram(program);\n                        gl.useProgram(program);\n                        buffer = gl.createBuffer();\n                        gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n                        verts = new Float32Array([-1, -1, 1, -1, 1, 1, -1, -1, -1, 1, 1, 1]);\n                        gl.bufferData(gl.ARRAY_BUFFER, verts, gl.STATIC_DRAW);\n                        positionAttrib = gl.getAttribLocation(program, \"position\");\n                        gl.enableVertexAttribArray(positionAttrib);\n                        gl.vertexAttribPointer(positionAttrib, 2, gl.FLOAT, false, 0, 0);\n                        texture = gl.createTexture();\n                        gl.activeTexture(gl.TEXTURE0);\n                        gl.bindTexture(gl.TEXTURE_2D, texture);\n                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n                        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n                        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, asset);\n                        gl.uniform1i(gl.getUniformLocation(program, \"texture\"), 0);\n                        gl.uniform1f(gl.getUniformLocation(program, \"width\"), asset.width);\n                        gl.uniform1f(gl.getUniformLocation(program, \"height\"), asset.height);\n                        pixelFrequency = Math.max(Math.round(imageData.width / imageBounds.width / 2), 1);\n                        gl.uniform1f(gl.getUniformLocation(program, \"pixelFrequency\"), pixelFrequency);\n                        setGLProgram(program);\n                      }\n                    }\n                  }\n\n                case 12:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n      };\n\n      setupGL().catch(function (e) {\n        return console.error(e);\n      });\n    }\n  }, [glContext, imageData]);\n  React.useEffect(function () {\n    var gl = glContext;\n    var program = glProgram;\n\n    if (gl !== null && program !== null) {\n      gl.uniform1i(gl.getUniformLocation(program, \"texture\"), 0);\n      gl.uniform1i(gl.getUniformLocation(program, \"radius\"), blur);\n      gl.uniform1i(gl.getUniformLocation(program, \"pass\"), 0);\n      var firstPassTexture = gl.createTexture();\n      gl.activeTexture(gl.TEXTURE1);\n      gl.bindTexture(gl.TEXTURE_2D, firstPassTexture);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.drawingBufferWidth, gl.drawingBufferHeight, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n      var fb = gl.createFramebuffer();\n      gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\n      var attachmentPoint = gl.COLOR_ATTACHMENT0;\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, attachmentPoint, gl.TEXTURE_2D, firstPassTexture, 0);\n      gl.drawArrays(gl.TRIANGLES, 0, 6);\n      gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n      gl.uniform1i(gl.getUniformLocation(program, \"texture\"), 1);\n      gl.uniform1i(gl.getUniformLocation(program, \"pass\"), 1);\n      gl.drawArrays(gl.TRIANGLES, 0, 6);\n      gl.endFrameEXP();\n    }\n  }, [blur, glContext, glProgram]);\n  var throttleSliderBlur = React.useRef(lodash_1.throttle(function (value) {\n    return setBlur(value);\n  }, 50, {\n    leading: true\n  })).current;\n  React.useEffect(function () {\n    return function () {};\n  });\n\n  if (glContext === null) {\n    return null;\n  }\n\n  return React.createElement(react_native_1.View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 13\n    }\n  }, React.createElement(react_native_1.View, {\n    style: [styles.row, {\n      justifyContent: \"center\"\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 7\n    }\n  }, React.createElement(react_native_slider_1.Slider, {\n    value: sliderValue,\n    onValueChange: function onValueChange(value) {\n      setSliderValue(value[0]);\n\n      if (throttleBlur) {\n        throttleSliderBlur(Math.round(value[0]));\n      } else {\n        setBlur(Math.round(value[0]));\n      }\n    },\n    minimumValue: 1,\n    maximumValue: 30,\n    minimumTrackTintColor: \"#00A3FF\",\n    maximumTrackTintColor: \"#ccc\",\n    thumbTintColor: \"#c4c4c4\",\n    containerStyle: styles.slider,\n    trackStyle: styles.sliderTrack,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 9\n    }\n  })), React.createElement(react_native_1.View, {\n    style: styles.row,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 7\n    }\n  }, React.createElement(IconButton_1.IconButton, {\n    iconID: \"close\",\n    text: \"Cancel\",\n    onPress: function onPress() {\n      return onClose();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 9\n    }\n  }), React.createElement(react_native_1.Text, {\n    style: styles.prompt,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 9\n    }\n  }, \"Blur Radius: \", Math.round(sliderValue)), React.createElement(IconButton_1.IconButton, {\n    iconID: \"check\",\n    text: \"Done\",\n    onPress: function onPress() {\n      return onSaveWithBlur();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 9\n    }\n  })));\n}\n\nexports.Blur = Blur;\nvar styles = react_native_1.StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: \"column\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\"\n  },\n  prompt: {\n    color: \"#fff\",\n    fontSize: 21,\n    textAlign: \"center\"\n  },\n  row: {\n    width: \"100%\",\n    height: 80,\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    paddingHorizontal: \"2%\"\n  },\n  slider: {\n    height: 20,\n    width: \"90%\",\n    maxWidth: 600\n  },\n  sliderTrack: {\n    borderRadius: 10\n  }\n});","map":{"version":3,"sources":["../../src/OperationBar/Blur.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Blur = void 0;\nconst React = __importStar(require(\"react\"));\nconst react_native_1 = require(\"react-native\");\nconst recoil_1 = require(\"recoil\");\nconst IconButton_1 = require(\"../components/IconButton\");\nconst Store_1 = require(\"../Store\");\nconst react_native_slider_1 = require(\"@miblanchard/react-native-slider\");\nconst expo_asset_1 = require(\"expo-asset\");\nconst expo_gl_1 = require(\"expo-gl\");\nconst ImageManinpulator = __importStar(require(\"expo-image-manipulator\"));\nconst FileSystem = __importStar(require(\"expo-file-system\"));\nconst lodash_1 = require(\"lodash\");\nconst vertShader = `\nprecision highp float;\nattribute vec2 position;\nvarying vec2 uv;\nvoid main () {\n  uv = position;\n  gl_Position = vec4(1.0 - 2.0 * uv, 0, 1);\n}`;\nconst fragShader = `\nprecision highp float;\nprecision highp int;\nuniform sampler2D texture;\nuniform highp float width;\nuniform highp float height;\nvarying vec2 uv;\nuniform highp int radius;\nuniform highp int pass;\nuniform highp float pixelFrequency;\nfloat gauss (float sigma, float x) {\n  float g = (1.0/sqrt(2.0*3.142*sigma*sigma))*exp(-0.5*(x*x)/(sigma*sigma));\n  return g;\n}\nvoid main () {\n  float f_radius = float(radius);\n  float sigma = (0.5 * f_radius);\n  // Get the color of the fragment pixel\n  vec4 color = texture2D(texture, vec2(uv.x, uv.y));\n  color *= gauss(sigma, 0.0);\n  // Loop over the neightbouring pixels\n  for (int i = -30; i <= 30; i++) {\n    // Make sure we don't include the main pixel which we already sampled!\n    if (i != 0) {\n      // Check we are on an index that doesn't exceed the blur radius specified\n      if (i >= -radius && i <= radius) {\n        float index = float(i);\n        // Caclulate the current pixel index\n        float pixelIndex = 0.0;\n        if (pass == 0) {\n          pixelIndex = (uv.y) * height;\n        }\n        else {\n          pixelIndex = uv.x * width;\n        }\n        // Get the neighbouring pixel index\n        float offset = index * pixelFrequency;\n        pixelIndex += offset;\n        // Normalise the new index back into the 0.0 to 1.0 range\n        if (pass == 0) {\n          pixelIndex /= height;\n        }\n        else {\n          pixelIndex /= width;\n        }\n        // Pad the UV \n        if (pixelIndex < 0.0) {\n          pixelIndex = 0.0;\n        }\n        if (pixelIndex > 1.0) {\n          pixelIndex = 1.0;\n        }\n        // Get gaussian amplitude\n        float g = gauss(sigma, index);\n        // Get the color of neighbouring pixel\n        vec4 previousColor = vec4(0.0, 0.0, 0.0, 0.0);\n        if (pass == 0) {\n          previousColor = texture2D(texture, vec2(uv.x, pixelIndex)) * g;\n        }\n        else {\n          previousColor = texture2D(texture, vec2(pixelIndex, uv.y)) * g;\n        }\n        color += previousColor;\n      }\n    }\n  }\n  // Return the resulting color\n  gl_FragColor = color;\n}`;\nfunction Blur() {\n    //\n    const [, setProcessing] = recoil_1.useRecoilState(Store_1.processingState);\n    const [imageData, setImageData] = recoil_1.useRecoilState(Store_1.imageDataState);\n    const [, setEditingMode] = recoil_1.useRecoilState(Store_1.editingModeState);\n    const [glContext, setGLContext] = recoil_1.useRecoilState(Store_1.glContextState);\n    const [imageBounds] = recoil_1.useRecoilState(Store_1.imageBoundsState);\n    const [throttleBlur] = recoil_1.useRecoilState(Store_1.throttleBlurState);\n    const [sliderValue, setSliderValue] = React.useState(15);\n    const [blur, setBlur] = React.useState(15);\n    const [glProgram, setGLProgram] = React.useState(null);\n    const onClose = () => {\n        // If closing reset the image back to its original\n        setGLContext(null);\n        setEditingMode(\"operation-select\");\n    };\n    const onSaveWithBlur = () => __awaiter(this, void 0, void 0, function* () {\n        // Set the processing to true so no UI can be interacted with\n        setProcessing(true);\n        // Take a snapshot of the GLView's current framebuffer and set that as the new image data\n        const gl = glContext;\n        gl.drawArrays(gl.TRIANGLES, 0, 6);\n        const output = yield expo_gl_1.GLView.takeSnapshotAsync(gl);\n        // Do any addtional platform processing of the result and set it as the\n        // new image data\n        if (react_native_1.Platform.OS === \"web\") {\n            const fileReaderInstance = new FileReader();\n            fileReaderInstance.readAsDataURL(output.uri);\n            fileReaderInstance.onload = () => __awaiter(this, void 0, void 0, function* () {\n                const base64data = fileReaderInstance.result;\n                const flippedOutput = yield ImageManinpulator.manipulateAsync(base64data, [{ flip: ImageManinpulator.FlipType.Vertical }]);\n                setImageData({\n                    uri: flippedOutput.uri,\n                    width: flippedOutput.width,\n                    height: flippedOutput.height,\n                });\n            });\n        }\n        else {\n            const flippedOutput = yield ImageManinpulator.manipulateAsync(output.uri, [{ flip: ImageManinpulator.FlipType.Vertical }]);\n            setImageData({\n                uri: flippedOutput.uri,\n                width: flippedOutput.width,\n                height: flippedOutput.height,\n            });\n        }\n        // Reset back to operation selection mode\n        setProcessing(false);\n        setGLContext(null);\n        // Small timeout so it can set processing state to flase BEFORE\n        // Blur component is unmounted...\n        setTimeout(() => {\n            setEditingMode(\"operation-select\");\n        }, 100);\n    });\n    React.useEffect(() => {\n        if (glContext !== null) {\n            const setupGL = () => __awaiter(this, void 0, void 0, function* () {\n                // Load in the asset and get its height and width\n                const gl = glContext;\n                // Do some magic instead of using asset.download async as this tries to\n                // redownload the file:// uri on android and iOS\n                let asset;\n                if (react_native_1.Platform.OS !== \"web\") {\n                    asset = {\n                        uri: imageData.uri,\n                        localUri: imageData.uri,\n                        height: imageData.height,\n                        width: imageData.width,\n                    };\n                    yield FileSystem.copyAsync({\n                        from: asset.uri,\n                        to: FileSystem.cacheDirectory + \"blur.jpg\",\n                    });\n                    asset.localUri = FileSystem.cacheDirectory + \"blur.jpg\";\n                }\n                else {\n                    asset = expo_asset_1.Asset.fromURI(imageData.uri);\n                    yield asset.downloadAsync();\n                }\n                if (asset.width && asset.height) {\n                    // Setup the shaders for our GL context so it draws from texImage2D\n                    const vert = gl.createShader(gl.VERTEX_SHADER);\n                    const frag = gl.createShader(gl.FRAGMENT_SHADER);\n                    if (vert && frag) {\n                        // Set the source of the shaders and compile them\n                        gl.shaderSource(vert, vertShader);\n                        gl.compileShader(vert);\n                        gl.shaderSource(frag, fragShader);\n                        gl.compileShader(frag);\n                        // Create a WebGL program so we can link the shaders together\n                        const program = gl.createProgram();\n                        if (program) {\n                            // Attach both the vertex and frag shader to the program\n                            gl.attachShader(program, vert);\n                            gl.attachShader(program, frag);\n                            // Link the program - ensures that vetex and frag shaders are compatible\n                            // with each other\n                            gl.linkProgram(program);\n                            // Tell GL we ant to now use this program\n                            gl.useProgram(program);\n                            // Create a buffer on the GPU and assign its type as array buffer\n                            const buffer = gl.createBuffer();\n                            gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n                            // Create the verticies for WebGL to form triangles on the screen\n                            // using the vertex shader which forms a square or rectangle in this case\n                            const verts = new Float32Array([\n                                -1,\n                                -1,\n                                1,\n                                -1,\n                                1,\n                                1,\n                                -1,\n                                -1,\n                                -1,\n                                1,\n                                1,\n                                1,\n                            ]);\n                            // Actually pass the verticies into the buffer and tell WebGL this is static\n                            // for optimisations\n                            gl.bufferData(gl.ARRAY_BUFFER, verts, gl.STATIC_DRAW);\n                            // Get the index in memory for the position attribute defined in the\n                            // vertex shader\n                            const positionAttrib = gl.getAttribLocation(program, \"position\");\n                            gl.enableVertexAttribArray(positionAttrib); // Enable it i guess\n                            // Tell the vertex shader how to process this attribute buffer\n                            gl.vertexAttribPointer(positionAttrib, 2, gl.FLOAT, false, 0, 0);\n                            // Fetch an expo asset which can passed in as the source for the\n                            // texImage2D\n                            // Create some space in memory for a texture\n                            const texture = gl.createTexture();\n                            // Set the active texture to the texture 0 binding (0-30)\n                            gl.activeTexture(gl.TEXTURE0);\n                            // Bind the texture to WebGL stating what type of texture it is\n                            gl.bindTexture(gl.TEXTURE_2D, texture);\n                            // Set some parameters for the texture\n                            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n                            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n                            // Then set the data of this texture using texImage2D\n                            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, asset);\n                            // Set a bunch of uniforms we want to pass into our fragment shader\n                            gl.uniform1i(gl.getUniformLocation(program, \"texture\"), 0);\n                            gl.uniform1f(gl.getUniformLocation(program, \"width\"), asset.width);\n                            gl.uniform1f(gl.getUniformLocation(program, \"height\"), asset.height);\n                            // Calculate the pixel frequency to sample at based on the image resolution\n                            // as the blur radius is in dp\n                            const pixelFrequency = Math.max(Math.round(imageData.width / imageBounds.width / 2), 1);\n                            gl.uniform1f(gl.getUniformLocation(program, \"pixelFrequency\"), pixelFrequency);\n                            setGLProgram(program);\n                        }\n                    }\n                }\n            });\n            setupGL().catch((e) => console.error(e));\n        }\n    }, [glContext, imageData]);\n    React.useEffect(() => {\n        const gl = glContext;\n        const program = glProgram;\n        if (gl !== null && program !== null) {\n            gl.uniform1i(gl.getUniformLocation(program, \"texture\"), 0);\n            gl.uniform1i(gl.getUniformLocation(program, \"radius\"), blur);\n            gl.uniform1i(gl.getUniformLocation(program, \"pass\"), 0);\n            // Setup so first pass renders to a texture rather than to canvas\n            // Create and bind the framebuffer\n            const firstPassTexture = gl.createTexture();\n            // Set the active texture to the texture 0 binding (0-30)\n            gl.activeTexture(gl.TEXTURE1);\n            // Bind the texture to WebGL stating what type of texture it is\n            gl.bindTexture(gl.TEXTURE_2D, firstPassTexture);\n            // Set some parameters for the texture\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n            // Then set the data of this texture using texImage2D\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.drawingBufferWidth, gl.drawingBufferHeight, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n            const fb = gl.createFramebuffer();\n            gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\n            // attach the texture as the first color attachment\n            const attachmentPoint = gl.COLOR_ATTACHMENT0;\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, attachmentPoint, gl.TEXTURE_2D, firstPassTexture, 0);\n            //gl.viewport(0, 0, imageData.width, imageData.height);\n            // Actually draw using the shader program we setup!\n            gl.drawArrays(gl.TRIANGLES, 0, 6);\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n            //gl.viewport(0, 0, imageData.width, imageData.height);\n            gl.uniform1i(gl.getUniformLocation(program, \"texture\"), 1);\n            gl.uniform1i(gl.getUniformLocation(program, \"pass\"), 1);\n            gl.drawArrays(gl.TRIANGLES, 0, 6);\n            gl.endFrameEXP();\n        }\n    }, [blur, glContext, glProgram]);\n    const throttleSliderBlur = React.useRef(lodash_1.throttle((value) => setBlur(value), 50, { leading: true })).current;\n    React.useEffect(() => {\n        return () => { };\n    });\n    if (glContext === null) {\n        return null;\n    }\n    return (<react_native_1.View style={styles.container}>\n      <react_native_1.View style={[styles.row, { justifyContent: \"center\" }]}>\n        <react_native_slider_1.Slider value={sliderValue} onValueChange={(value) => {\n        setSliderValue(value[0]);\n        if (throttleBlur) {\n            throttleSliderBlur(Math.round(value[0]));\n        }\n        else {\n            setBlur(Math.round(value[0]));\n        }\n    }} minimumValue={1} maximumValue={30} minimumTrackTintColor=\"#00A3FF\" maximumTrackTintColor=\"#ccc\" thumbTintColor=\"#c4c4c4\" containerStyle={styles.slider} trackStyle={styles.sliderTrack}/>\n      </react_native_1.View>\n      <react_native_1.View style={styles.row}>\n        <IconButton_1.IconButton iconID=\"close\" text=\"Cancel\" onPress={() => onClose()}/>\n        <react_native_1.Text style={styles.prompt}>\n          Blur Radius: {Math.round(sliderValue)}\n        </react_native_1.Text>\n        <IconButton_1.IconButton iconID=\"check\" text=\"Done\" onPress={() => onSaveWithBlur()}/>\n      </react_native_1.View>\n    </react_native_1.View>);\n}\nexports.Blur = Blur;\nconst styles = react_native_1.StyleSheet.create({\n    container: {\n        flex: 1,\n        flexDirection: \"column\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n    },\n    prompt: {\n        color: \"#fff\",\n        fontSize: 21,\n        textAlign: \"center\",\n    },\n    row: {\n        width: \"100%\",\n        height: 80,\n        flexDirection: \"row\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n        paddingHorizontal: \"2%\",\n    },\n    slider: {\n        height: 20,\n        width: \"90%\",\n        maxWidth: 600,\n    },\n    sliderTrack: {\n        borderRadius: 10,\n    },\n});\n//# sourceMappingURL=Blur.js.map"]},"metadata":{},"sourceType":"script"}