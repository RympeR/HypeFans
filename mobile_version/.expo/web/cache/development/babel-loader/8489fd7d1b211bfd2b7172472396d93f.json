{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\develop\\\\pypr\\\\HypeFans\\\\mobile_version\\\\node_modules\\\\expo-svg-uri\\\\index.js\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { ViewPropTypes } from \"react-native-web/dist/index\";\nimport PropTypes from \"prop-types\";\nimport xmldom from \"xmldom\";\nimport resolveAssetSource from \"react-native/Libraries/Image/resolveAssetSource\";\nimport Svg, { Circle, Ellipse, G, LinearGradient, RadialGradient, Line, Path, Polygon, Polyline, Rect, Text, TSpan, Defs, Stop } from \"react-native-svg\";\nimport * as utils from \"./utils\";\nvar ACCEPTED_SVG_ELEMENTS = [\"svg\", \"g\", \"circle\", \"path\", \"rect\", \"defs\", \"line\", \"linearGradient\", \"radialGradient\", \"stop\", \"ellipse\", \"polygon\", \"polyline\", \"text\", \"tspan\"];\nvar SVG_ATTS = [\"viewBox\", \"width\", \"height\"];\nvar G_ATTS = [\"id\"];\nvar CIRCLE_ATTS = [\"cx\", \"cy\", \"r\"];\nvar PATH_ATTS = [\"d\"];\nvar RECT_ATTS = [\"width\", \"height\"];\nvar LINE_ATTS = [\"x1\", \"y1\", \"x2\", \"y2\"];\nvar LINEARG_ATTS = LINE_ATTS.concat([\"id\", \"gradientUnits\"]);\nvar RADIALG_ATTS = CIRCLE_ATTS.concat([\"id\", \"gradientUnits\"]);\nvar STOP_ATTS = [\"offset\"];\nvar ELLIPSE_ATTS = [\"cx\", \"cy\", \"rx\", \"ry\"];\nvar TEXT_ATTS = [\"fontFamily\", \"fontSize\", \"fontWeight\", \"textAnchor\"];\nvar POLYGON_ATTS = [\"points\"];\nvar POLYLINE_ATTS = [\"points\"];\nvar COMMON_ATTS = [\"fill\", \"fillOpacity\", \"stroke\", \"strokeWidth\", \"strokeOpacity\", \"opacity\", \"strokeLinecap\", \"strokeLinejoin\", \"strokeDasharray\", \"strokeDashoffset\", \"x\", \"y\", \"rotate\", \"scale\", \"origin\", \"originX\", \"originY\", \"transform\", \"clipPath\"];\nvar ind = 0;\n\nfunction fixYPosition(y, node) {\n  if (node.attributes) {\n    var fontSizeAttr = Object.keys(node.attributes).find(function (a) {\n      return node.attributes[a].name === \"font-size\";\n    });\n\n    if (fontSizeAttr) {\n      return \"\" + (parseFloat(y) - parseFloat(node.attributes[fontSizeAttr].value));\n    }\n  }\n\n  if (!node.parentNode) {\n    return y;\n  }\n\n  return fixYPosition(y, node.parentNode);\n}\n\nvar SvgUri = function (_Component) {\n  _inherits(SvgUri, _Component);\n\n  var _super = _createSuper(SvgUri);\n\n  function SvgUri(props) {\n    var _this;\n\n    _classCallCheck(this, SvgUri);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      fill: props.fill,\n      svgXmlData: props.svgXmlData,\n      stroke: props.stroke\n    };\n    _this.createSVGElement = _this.createSVGElement.bind(_assertThisInitialized(_this));\n    _this.obtainComponentAtts = _this.obtainComponentAtts.bind(_assertThisInitialized(_this));\n    _this.inspectNode = _this.inspectNode.bind(_assertThisInitialized(_this));\n    _this.fetchSVGData = _this.fetchSVGData.bind(_assertThisInitialized(_this));\n    _this.isComponentMounted = false;\n\n    if (props.source) {\n      var source = resolveAssetSource(props.source) || {};\n\n      _this.fetchSVGData(source.uri);\n    }\n\n    return _this;\n  }\n\n  _createClass(SvgUri, [{\n    key: \"UNSAFE_componentWillMount\",\n    value: function UNSAFE_componentWillMount() {\n      this.isComponentMounted = true;\n    }\n  }, {\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      if (nextProps.source) {\n        var source = resolveAssetSource(nextProps.source) || {};\n        var oldSource = resolveAssetSource(this.props.source) || {};\n\n        if (source.uri !== oldSource.uri) {\n          this.fetchSVGData(source.uri);\n        }\n      }\n\n      if (nextProps.svgXmlData !== this.props.svgXmlData) {\n        this.setState({\n          svgXmlData: nextProps.svgXmlData\n        });\n      }\n\n      if (nextProps.fill !== this.props.fill) {\n        this.setState({\n          fill: nextProps.fill\n        });\n      }\n\n      if (nextProps.stroke !== this.props.stroke) {\n        this.setState({\n          stroke: nextProps.stroke\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.isComponentMounted = false;\n    }\n  }, {\n    key: \"fetchSVGData\",\n    value: function fetchSVGData(uri) {\n      var _this2 = this;\n\n      var responseXML, error, response;\n      return _regeneratorRuntime.async(function fetchSVGData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              responseXML = null, error = null;\n              _context.prev = 1;\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(fetch(uri));\n\n            case 4:\n              response = _context.sent;\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(response.text());\n\n            case 7:\n              responseXML = _context.sent;\n              _context.next = 14;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](1);\n              error = _context.t0;\n              console.error(\"ERROR SVG\", _context.t0);\n\n            case 14:\n              _context.prev = 14;\n\n              if (this.isComponentMounted) {\n                this.setState({\n                  svgXmlData: responseXML\n                }, function () {\n                  var onLoad = _this2.props.onLoad;\n\n                  if (onLoad && !error) {\n                    onLoad();\n                  }\n                });\n              }\n\n              return _context.finish(14);\n\n            case 17:\n              return _context.abrupt(\"return\", responseXML);\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, [[1, 10, 14, 17]], Promise);\n    }\n  }, {\n    key: \"trimElementChilden\",\n    value: function trimElementChilden(children) {\n      for (var _iterator = _createForOfIteratorHelperLoose(children), _step; !(_step = _iterator()).done;) {\n        child = _step.value;\n\n        if (typeof child === \"string\") {\n          if (child.trim().length === 0) children.splice(children.indexOf(child), 1);\n        }\n      }\n    }\n  }, {\n    key: \"createSVGElement\",\n    value: function createSVGElement(node, childs) {\n      this.trimElementChilden(childs);\n      var componentAtts = {};\n      var i = ind++;\n\n      switch (node.nodeName) {\n        case \"svg\":\n          componentAtts = this.obtainComponentAtts(node, SVG_ATTS);\n\n          if (this.props.width) {\n            componentAtts.width = this.props.width;\n          }\n\n          if (this.props.height) {\n            componentAtts.height = this.props.height;\n          }\n\n          return React.createElement(Svg, _extends({\n            key: i\n          }, componentAtts, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 11\n            }\n          }), childs);\n\n        case \"g\":\n          componentAtts = this.obtainComponentAtts(node, G_ATTS);\n          return React.createElement(G, _extends({\n            key: i\n          }, componentAtts, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 11\n            }\n          }), childs);\n\n        case \"path\":\n          componentAtts = this.obtainComponentAtts(node, PATH_ATTS);\n          return React.createElement(Path, _extends({\n            key: i\n          }, componentAtts, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 11\n            }\n          }), childs);\n\n        case \"circle\":\n          componentAtts = this.obtainComponentAtts(node, CIRCLE_ATTS);\n          return React.createElement(Circle, _extends({\n            key: i\n          }, componentAtts, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 11\n            }\n          }), childs);\n\n        case \"rect\":\n          componentAtts = this.obtainComponentAtts(node, RECT_ATTS);\n          return React.createElement(Rect, _extends({\n            key: i\n          }, componentAtts, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 11\n            }\n          }), childs);\n\n        case \"line\":\n          componentAtts = this.obtainComponentAtts(node, LINE_ATTS);\n          return React.createElement(Line, _extends({\n            key: i\n          }, componentAtts, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 11\n            }\n          }), childs);\n\n        case \"defs\":\n          return React.createElement(Defs, {\n            key: i,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 16\n            }\n          }, childs);\n\n        case \"linearGradient\":\n          componentAtts = this.obtainComponentAtts(node, LINEARG_ATTS);\n          return React.createElement(LinearGradient, _extends({\n            key: i\n          }, componentAtts, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 245,\n              columnNumber: 11\n            }\n          }), childs);\n\n        case \"radialGradient\":\n          componentAtts = this.obtainComponentAtts(node, RADIALG_ATTS);\n          return React.createElement(RadialGradient, _extends({\n            key: i\n          }, componentAtts, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 11\n            }\n          }), childs);\n\n        case \"stop\":\n          componentAtts = this.obtainComponentAtts(node, STOP_ATTS);\n          return React.createElement(Stop, _extends({\n            key: i\n          }, componentAtts, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 11\n            }\n          }), childs);\n\n        case \"ellipse\":\n          componentAtts = this.obtainComponentAtts(node, ELLIPSE_ATTS);\n          return React.createElement(Ellipse, _extends({\n            key: i\n          }, componentAtts, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 11\n            }\n          }), childs);\n\n        case \"polygon\":\n          componentAtts = this.obtainComponentAtts(node, POLYGON_ATTS);\n          return React.createElement(Polygon, _extends({\n            key: i\n          }, componentAtts, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 11\n            }\n          }), childs);\n\n        case \"polyline\":\n          componentAtts = this.obtainComponentAtts(node, POLYLINE_ATTS);\n          return React.createElement(Polyline, _extends({\n            key: i\n          }, componentAtts, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 11\n            }\n          }), childs);\n\n        case \"text\":\n          componentAtts = this.obtainComponentAtts(node, TEXT_ATTS);\n          return React.createElement(Text, _extends({\n            key: i\n          }, componentAtts, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 287,\n              columnNumber: 11\n            }\n          }), childs);\n\n        case \"tspan\":\n          componentAtts = this.obtainComponentAtts(node, TEXT_ATTS);\n\n          if (componentAtts.y) {\n            componentAtts.y = fixYPosition(componentAtts.y, node);\n          }\n\n          return React.createElement(TSpan, _extends({\n            key: i\n          }, componentAtts, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 11\n            }\n          }), childs);\n\n        default:\n          return null;\n      }\n    }\n  }, {\n    key: \"obtainComponentAtts\",\n    value: function obtainComponentAtts(_ref, enabledAttributes) {\n      var _this3 = this;\n\n      var attributes = _ref.attributes;\n      var styleAtts = {};\n\n      if (this.state.fill && this.props.fillAll) {\n        styleAtts.fill = this.state.fill;\n      }\n\n      Array.from(attributes).forEach(function (_ref2) {\n        var nodeName = _ref2.nodeName,\n            nodeValue = _ref2.nodeValue;\n\n        _extends(styleAtts, utils.transformStyle({\n          nodeName: nodeName,\n          nodeValue: nodeValue,\n          fillProp: _this3.state.fill\n        }));\n      });\n      var componentAtts = Array.from(attributes).map(utils.camelCaseNodeName).map(utils.removePixelsFromNodeValue).filter(utils.getEnabledAttributes(enabledAttributes.concat(COMMON_ATTS))).reduce(function (acc, _ref3) {\n        var nodeName = _ref3.nodeName,\n            nodeValue = _ref3.nodeValue;\n\n        if (nodeValue === \"none\") {\n          acc[nodeName] = nodeValue;\n        } else {\n          switch (nodeName) {\n            case \"fill\":\n              acc[nodeName] = _this3.state.fill ? _this3.state.fill : nodeValue;\n              break;\n\n            case \"stroke\":\n              acc[nodeName] = _this3.state.stroke ? _this3.state.stroke : nodeValue;\n              break;\n\n            default:\n              acc[nodeName] = nodeValue;\n              break;\n          }\n        }\n\n        return acc;\n      }, {});\n\n      _extends(componentAtts, styleAtts);\n\n      return componentAtts;\n    }\n  }, {\n    key: \"inspectNode\",\n    value: function inspectNode(node) {\n      var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      if (!ACCEPTED_SVG_ELEMENTS.includes(node.nodeName)) {\n        return React.createElement(View, {\n          key: node.nodeName + \"-\" + index,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 14\n          }\n        });\n      }\n\n      var arrayElements = [];\n\n      if (node.childNodes && node.childNodes.length > 0) {\n        for (var i = 0; i < node.childNodes.length; i++) {\n          var isTextValue = node.childNodes[i].nodeValue;\n\n          if (isTextValue) {\n            arrayElements.push(node.childNodes[i].nodeValue);\n          } else {\n            var nodo = this.inspectNode(node.childNodes[i], i);\n\n            if (nodo != null) {\n              arrayElements.push(nodo);\n            }\n          }\n        }\n      }\n\n      return this.createSVGElement(node, arrayElements);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      try {\n        if (this.state.svgXmlData == null) {\n          return null;\n        }\n\n        var inputSVG = this.state.svgXmlData.substring(this.state.svgXmlData.indexOf(\"<svg \"), this.state.svgXmlData.indexOf(\"</svg>\") + 6).replace(/<!-(.*?)->/g, \"\");\n        var doc = new xmldom.DOMParser().parseFromString(inputSVG);\n        var rootSVG = this.inspectNode(doc.childNodes[0]);\n        return React.createElement(View, {\n          style: this.props.style,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 403,\n            columnNumber: 14\n          }\n        }, rootSVG);\n      } catch (e) {\n        console.error(\"ERROR SVG\", e);\n        return null;\n      }\n    }\n  }]);\n\n  return SvgUri;\n}(Component);\n\nSvgUri.propTypes = {\n  style: ViewPropTypes.style,\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  svgXmlData: PropTypes.string,\n  source: PropTypes.any,\n  fill: PropTypes.string,\n  stroke: PropTypes.string,\n  onLoad: PropTypes.func,\n  fillAll: PropTypes.bool\n};\nmodule.exports = SvgUri;","map":{"version":3,"sources":["D:/develop/pypr/HypeFans/mobile_version/node_modules/expo-svg-uri/index.js"],"names":["React","Component","ViewPropTypes","PropTypes","xmldom","resolveAssetSource","Svg","Circle","Ellipse","G","LinearGradient","RadialGradient","Line","Path","Polygon","Polyline","Rect","Text","TSpan","Defs","Stop","utils","ACCEPTED_SVG_ELEMENTS","SVG_ATTS","G_ATTS","CIRCLE_ATTS","PATH_ATTS","RECT_ATTS","LINE_ATTS","LINEARG_ATTS","concat","RADIALG_ATTS","STOP_ATTS","ELLIPSE_ATTS","TEXT_ATTS","POLYGON_ATTS","POLYLINE_ATTS","COMMON_ATTS","ind","fixYPosition","y","node","attributes","fontSizeAttr","Object","keys","find","a","name","parseFloat","value","parentNode","SvgUri","props","state","fill","svgXmlData","stroke","createSVGElement","bind","obtainComponentAtts","inspectNode","fetchSVGData","isComponentMounted","source","uri","nextProps","oldSource","setState","responseXML","error","fetch","response","text","console","onLoad","children","child","trim","length","splice","indexOf","childs","trimElementChilden","componentAtts","i","nodeName","width","height","enabledAttributes","styleAtts","fillAll","Array","from","forEach","nodeValue","transformStyle","fillProp","map","camelCaseNodeName","removePixelsFromNodeValue","filter","getEnabledAttributes","reduce","acc","index","includes","arrayElements","childNodes","isTextValue","push","nodo","inputSVG","substring","replace","doc","DOMParser","parseFromString","rootSVG","style","e","propTypes","oneOfType","string","number","any","func","bool","module","exports"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { View, ViewPropTypes } from \"react-native\";\nimport PropTypes from \"prop-types\";\nimport xmldom from \"xmldom\";\nimport resolveAssetSource from \"react-native/Libraries/Image/resolveAssetSource\";\n\nimport Svg, {\n  Circle,\n  Ellipse,\n  G,\n  LinearGradient,\n  RadialGradient,\n  Line,\n  Path,\n  Polygon,\n  Polyline,\n  Rect,\n  Text,\n  TSpan,\n  Defs,\n  Stop,\n} from \"react-native-svg\";\n\nimport * as utils from \"./utils\";\n\nconst ACCEPTED_SVG_ELEMENTS = [\n  \"svg\",\n  \"g\",\n  \"circle\",\n  \"path\",\n  \"rect\",\n  \"defs\",\n  \"line\",\n  \"linearGradient\",\n  \"radialGradient\",\n  \"stop\",\n  \"ellipse\",\n  \"polygon\",\n  \"polyline\",\n  \"text\",\n  \"tspan\",\n];\n\n// Attributes from SVG elements that are mapped directly.\nconst SVG_ATTS = [\"viewBox\", \"width\", \"height\"];\nconst G_ATTS = [\"id\"];\n\nconst CIRCLE_ATTS = [\"cx\", \"cy\", \"r\"];\nconst PATH_ATTS = [\"d\"];\nconst RECT_ATTS = [\"width\", \"height\"];\nconst LINE_ATTS = [\"x1\", \"y1\", \"x2\", \"y2\"];\nconst LINEARG_ATTS = LINE_ATTS.concat([\"id\", \"gradientUnits\"]);\nconst RADIALG_ATTS = CIRCLE_ATTS.concat([\"id\", \"gradientUnits\"]);\nconst STOP_ATTS = [\"offset\"];\nconst ELLIPSE_ATTS = [\"cx\", \"cy\", \"rx\", \"ry\"];\n\nconst TEXT_ATTS = [\"fontFamily\", \"fontSize\", \"fontWeight\", \"textAnchor\"];\n\nconst POLYGON_ATTS = [\"points\"];\nconst POLYLINE_ATTS = [\"points\"];\n\nconst COMMON_ATTS = [\n  \"fill\",\n  \"fillOpacity\",\n  \"stroke\",\n  \"strokeWidth\",\n  \"strokeOpacity\",\n  \"opacity\",\n  \"strokeLinecap\",\n  \"strokeLinejoin\",\n  \"strokeDasharray\",\n  \"strokeDashoffset\",\n  \"x\",\n  \"y\",\n  \"rotate\",\n  \"scale\",\n  \"origin\",\n  \"originX\",\n  \"originY\",\n  \"transform\",\n  \"clipPath\",\n];\n\nlet ind = 0;\n\nfunction fixYPosition(y, node) {\n  if (node.attributes) {\n    const fontSizeAttr = Object.keys(node.attributes).find(\n      (a) => node.attributes[a].name === \"font-size\"\n    );\n    if (fontSizeAttr) {\n      return (\n        \"\" + (parseFloat(y) - parseFloat(node.attributes[fontSizeAttr].value))\n      );\n    }\n  }\n  if (!node.parentNode) {\n    return y;\n  }\n  return fixYPosition(y, node.parentNode);\n}\n\nclass SvgUri extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { fill: props.fill, svgXmlData: props.svgXmlData, stroke: props.stroke };\n\n    this.createSVGElement = this.createSVGElement.bind(this);\n    this.obtainComponentAtts = this.obtainComponentAtts.bind(this);\n    this.inspectNode = this.inspectNode.bind(this);\n    this.fetchSVGData = this.fetchSVGData.bind(this);\n\n    this.isComponentMounted = false;\n\n    // Gets the image data from an URL or a static file\n    if (props.source) {\n      const source = resolveAssetSource(props.source) || {};\n      this.fetchSVGData(source.uri);\n    }\n  }\n\n  UNSAFE_componentWillMount() {\n    this.isComponentMounted = true;\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (nextProps.source) {\n      const source = resolveAssetSource(nextProps.source) || {};\n      const oldSource = resolveAssetSource(this.props.source) || {};\n      if (source.uri !== oldSource.uri) {\n        this.fetchSVGData(source.uri);\n      }\n    }\n\n    if (nextProps.svgXmlData !== this.props.svgXmlData) {\n      this.setState({ svgXmlData: nextProps.svgXmlData });\n    }\n\n    if (nextProps.fill !== this.props.fill) {\n      this.setState({ fill: nextProps.fill });\n    }\n\n    if (nextProps.stroke !== this.props.stroke) {\n      this.setState({ stroke: nextProps.stroke });\n    }\n  }\n\n  componentWillUnmount() {\n    this.isComponentMounted = false;\n  }\n\n  async fetchSVGData(uri) {\n    let responseXML = null,\n      error = null;\n    try {\n      const response = await fetch(uri);\n      responseXML = await response.text();\n    } catch (e) {\n      error = e;\n      console.error(\"ERROR SVG\", e);\n    } finally {\n      if (this.isComponentMounted) {\n        this.setState({ svgXmlData: responseXML }, () => {\n          const { onLoad } = this.props;\n          if (onLoad && !error) {\n            onLoad();\n          }\n        });\n      }\n    }\n\n    return responseXML;\n  }\n\n  // Remove empty strings from children array\n  trimElementChilden(children) {\n    for (child of children) {\n      if (typeof child === \"string\") {\n        if (child.trim().length === 0)\n          children.splice(children.indexOf(child), 1);\n      }\n    }\n  }\n\n  createSVGElement(node, childs) {\n    this.trimElementChilden(childs);\n    let componentAtts = {};\n    const i = ind++;\n    switch (node.nodeName) {\n      case \"svg\":\n        componentAtts = this.obtainComponentAtts(node, SVG_ATTS);\n        if (this.props.width) {\n          componentAtts.width = this.props.width;\n        }\n        if (this.props.height) {\n          componentAtts.height = this.props.height;\n        }\n\n        return (\n          <Svg key={i} {...componentAtts}>\n            {childs}\n          </Svg>\n        );\n      case \"g\":\n        componentAtts = this.obtainComponentAtts(node, G_ATTS);\n        return (\n          <G key={i} {...componentAtts}>\n            {childs}\n          </G>\n        );\n      case \"path\":\n        componentAtts = this.obtainComponentAtts(node, PATH_ATTS);\n        return (\n          <Path key={i} {...componentAtts}>\n            {childs}\n          </Path>\n        );\n      case \"circle\":\n        componentAtts = this.obtainComponentAtts(node, CIRCLE_ATTS);\n        return (\n          <Circle key={i} {...componentAtts}>\n            {childs}\n          </Circle>\n        );\n      case \"rect\":\n        componentAtts = this.obtainComponentAtts(node, RECT_ATTS);\n        return (\n          <Rect key={i} {...componentAtts}>\n            {childs}\n          </Rect>\n        );\n      case \"line\":\n        componentAtts = this.obtainComponentAtts(node, LINE_ATTS);\n        return (\n          <Line key={i} {...componentAtts}>\n            {childs}\n          </Line>\n        );\n      case \"defs\":\n        return <Defs key={i}>{childs}</Defs>;\n      case \"linearGradient\":\n        componentAtts = this.obtainComponentAtts(node, LINEARG_ATTS);\n        return (\n          <LinearGradient key={i} {...componentAtts}>\n            {childs}\n          </LinearGradient>\n        );\n      case \"radialGradient\":\n        componentAtts = this.obtainComponentAtts(node, RADIALG_ATTS);\n        return (\n          <RadialGradient key={i} {...componentAtts}>\n            {childs}\n          </RadialGradient>\n        );\n      case \"stop\":\n        componentAtts = this.obtainComponentAtts(node, STOP_ATTS);\n        return (\n          <Stop key={i} {...componentAtts}>\n            {childs}\n          </Stop>\n        );\n      case \"ellipse\":\n        componentAtts = this.obtainComponentAtts(node, ELLIPSE_ATTS);\n        return (\n          <Ellipse key={i} {...componentAtts}>\n            {childs}\n          </Ellipse>\n        );\n      case \"polygon\":\n        componentAtts = this.obtainComponentAtts(node, POLYGON_ATTS);\n        return (\n          <Polygon key={i} {...componentAtts}>\n            {childs}\n          </Polygon>\n        );\n      case \"polyline\":\n        componentAtts = this.obtainComponentAtts(node, POLYLINE_ATTS);\n        return (\n          <Polyline key={i} {...componentAtts}>\n            {childs}\n          </Polyline>\n        );\n      case \"text\":\n        componentAtts = this.obtainComponentAtts(node, TEXT_ATTS);\n        return (\n          <Text key={i} {...componentAtts}>\n            {childs}\n          </Text>\n        );\n      case \"tspan\":\n        componentAtts = this.obtainComponentAtts(node, TEXT_ATTS);\n        if (componentAtts.y) {\n          componentAtts.y = fixYPosition(componentAtts.y, node);\n        }\n        return (\n          <TSpan key={i} {...componentAtts}>\n            {childs}\n          </TSpan>\n        );\n      default:\n        return null;\n    }\n  }\n\n  obtainComponentAtts({ attributes }, enabledAttributes) {\n    const styleAtts = {};\n\n    if (this.state.fill && this.props.fillAll) {\n      styleAtts.fill = this.state.fill;\n    }\n\n    Array.from(attributes).forEach(({ nodeName, nodeValue }) => {\n      Object.assign(\n        styleAtts,\n        utils.transformStyle({\n          nodeName,\n          nodeValue,\n          fillProp: this.state.fill,\n        })\n      );\n    });\n\n    const componentAtts = Array.from(attributes)\n      .map(utils.camelCaseNodeName)\n      .map(utils.removePixelsFromNodeValue)\n      .filter(utils.getEnabledAttributes(enabledAttributes.concat(COMMON_ATTS)))\n      .reduce((acc, { nodeName, nodeValue }) => {\n        if(nodeValue === \"none\") {\n          acc[nodeName] = nodeValue\t\t\n        } else {\n          switch(nodeName) {\n            case \"fill\":\n              acc[nodeName] =\n                this.state.fill\n                  ? this.state.fill\n                  : nodeValue;\n              break\n            case \"stroke\":\n              acc[nodeName] =\n                this.state.stroke\n                  ? this.state.stroke\n                  : nodeValue;\n              break\n            default:\n              acc[nodeName] = nodeValue\n              break\n\t\t  }\n        }\n\n        return acc;\n      }, {});\n    Object.assign(componentAtts, styleAtts);\n\n    return componentAtts;\n  }\n\n  inspectNode(node, index = 0) {\n    // Only process accepted elements\n    if (!ACCEPTED_SVG_ELEMENTS.includes(node.nodeName)) {\n      return <View key={`${node.nodeName}-${index}`} />;\n    }\n\n    // Process the xml node\n    const arrayElements = [];\n\n    // if have children process them.\n    // Recursive function.\n    if (node.childNodes && node.childNodes.length > 0) {\n      for (let i = 0; i < node.childNodes.length; i++) {\n        const isTextValue = node.childNodes[i].nodeValue;\n        if (isTextValue) {\n          arrayElements.push(node.childNodes[i].nodeValue);\n        } else {\n          const nodo = this.inspectNode(node.childNodes[i], i);\n          if (nodo != null) {\n            arrayElements.push(nodo);\n          }\n        }\n      }\n    }\n\n    return this.createSVGElement(node, arrayElements);\n  }\n\n  render() {\n    try {\n      if (this.state.svgXmlData == null) {\n        return null;\n      }\n\n      const inputSVG = this.state.svgXmlData\n        .substring(\n          this.state.svgXmlData.indexOf(\"<svg \"),\n          this.state.svgXmlData.indexOf(\"</svg>\") + 6\n        )\n        .replace(/<!-(.*?)->/g, \"\");\n\n      const doc = new xmldom.DOMParser().parseFromString(inputSVG);\n\n      const rootSVG = this.inspectNode(doc.childNodes[0]);\n\n      return <View style={this.props.style}>{rootSVG}</View>;\n    } catch (e) {\n      console.error(\"ERROR SVG\", e);\n      return null;\n    }\n  }\n}\n\nSvgUri.propTypes = {\n  style: ViewPropTypes.style,\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  svgXmlData: PropTypes.string,\n  source: PropTypes.any,\n  fill: PropTypes.string,\n  stroke: PropTypes.string,\n  onLoad: PropTypes.func,\n  fillAll: PropTypes.bool,\n};\n\nmodule.exports = SvgUri;\n"]},"metadata":{},"sourceType":"module"}