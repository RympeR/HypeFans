# Generated by Django 3.1.7 on 2021-11-10 22:15

import core.utils.func
from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
import unixtimestampfield.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(db_index=True, error_messages={'unique': 'A user with that E-mail already exists.'}, help_text='Required', max_length=254, null=True, unique=True, verbose_name='E-mail')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to=core.utils.func.user_avatar, verbose_name='Аватар')),
                ('background_photo', models.ImageField(blank=True, null=True, upload_to=core.utils.func.user_avatar, verbose_name='Фото заднего плана')),
                ('username', models.CharField(blank=True, max_length=255, null=True, unique=True, verbose_name='Username')),
                ('first_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='First name')),
                ('bio', models.TextField(blank=True, null=True, verbose_name='БИО профиля')),
                ('birthday_date', unixtimestampfield.fields.UnixTimeStampField(blank=True, null=True, verbose_name='День рождения')),
                ('location', django_countries.fields.CountryField(blank=True, max_length=2, null=True)),
                ('subscribtion_price', models.IntegerField(default=0, verbose_name='Цена подписки')),
                ('message_price', models.IntegerField(default=0, verbose_name='Цена сообщений')),
                ('subscribtion_duration', models.IntegerField(default=7, verbose_name='Длина подписки в днях')),
                ('post_amount', models.IntegerField(blank=True, default=0, null=True, verbose_name='Кол-во постов')),
                ('fans_amount', models.IntegerField(blank=True, default=0, null=True, verbose_name='Кол-во фанатов')),
                ('repheral_link', models.CharField(blank=True, max_length=255, null=True, verbose_name='Реферальная ссылка')),
                ('email_notifications', models.BooleanField(default=False, verbose_name='Уведомления по почте')),
                ('push_notifications', models.BooleanField(default=False, verbose_name='Пуш уведомления')),
                ('hide_online', models.BooleanField(default=False, verbose_name='Скрывать онлайн')),
                ('allow_comments', models.BooleanField(default=True, verbose_name='Разрешить комментарии постов')),
                ('show_post_amount', models.BooleanField(default=True, verbose_name='Показывать кол-во постов')),
                ('show_fans_amount', models.BooleanField(default=True, verbose_name='Показывать кол-во фанов')),
                ('show_watermark', models.BooleanField(default=False, verbose_name='Показывать вотермарку')),
                ('validated_email', models.BooleanField(default=False, verbose_name='Подтвержденная почта')),
                ('validated_user', models.BooleanField(default=False, verbose_name='Подтвержденный профиль')),
                ('credit_amount', models.IntegerField(default=0, verbose_name='Кредитный баланс')),
                ('earned_credits_amount', models.IntegerField(default=0, verbose_name='Заработано')),
                ('blocked_users', models.ManyToManyField(blank=True, related_name='_user_blocked_users_+', to=settings.AUTH_USER_MODEL, verbose_name='Заблокированные пользователи')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('my_subscribes', models.ManyToManyField(blank=True, related_name='_user_my_subscribes_+', to=settings.AUTH_USER_MODEL, verbose_name='Мои подписки')),
                ('repheral_users', models.ManyToManyField(blank=True, related_name='_user_repheral_users_+', to=settings.AUTH_USER_MODEL, verbose_name='Реферальные пользователи')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Card',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(max_length=16, verbose_name='Номер карты')),
                ('date_year', models.CharField(max_length=5, verbose_name='Месяц/год')),
                ('cvc', models.CharField(max_length=3, verbose_name='CVC')),
                ('creator', models.BooleanField(default=False, verbose_name='Карта создателя')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_card', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Карта',
                'verbose_name_plural': 'Карты',
            },
        ),
        migrations.CreateModel(
            name='UserOnline',
            fields=[
                ('user', models.CharField(blank=True, max_length=255, primary_key=True, serialize=False, verbose_name='Юзернейм пользователя')),
                ('last_action', unixtimestampfield.fields.UnixTimeStampField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Последнее действие пользователя',
                'verbose_name_plural': 'Последние действия пользователей',
            },
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', unixtimestampfield.fields.UnixTimeStampField(auto_now_add=True, verbose_name='Время подписки')),
                ('end_date', unixtimestampfield.fields.UnixTimeStampField(verbose_name='Время конца подписки')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='source_user_subscribe', to=settings.AUTH_USER_MODEL, verbose_name='Кто подписался')),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='target_user_subscribe', to=settings.AUTH_USER_MODEL, verbose_name='На кого подписался')),
            ],
            options={
                'verbose_name': 'Подписка',
                'verbose_name_plural': 'Подписки',
            },
        ),
        migrations.CreateModel(
            name='PendingUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.ImageField(upload_to='docs/', verbose_name='Документы')),
                ('verified', models.BooleanField(blank=True, null=True, verbose_name='Верифицирован')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Ожидающие верификации')),
            ],
            options={
                'verbose_name': 'Пользователь на верификацию',
                'verbose_name_plural': 'Пользователи на верификацию',
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', unixtimestampfield.fields.UnixTimeStampField(verbose_name='Время пополнения')),
                ('amount', models.FloatField(verbose_name='Сумма пополнения')),
                ('card', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='card_payment', to='users.card', verbose_name='Карта пополнения')),
            ],
            options={
                'verbose_name': 'Пополнение',
                'verbose_name_plural': 'Пополнения',
            },
        ),
        migrations.CreateModel(
            name='Donation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', unixtimestampfield.fields.UnixTimeStampField(auto_now_add=True, verbose_name='Время оплаты')),
                ('amount', models.FloatField(default=0, null=True, verbose_name='Сумма')),
                ('reciever', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='recieved_user', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='paid_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Пожертвование',
                'verbose_name_plural': 'Пожертвования',
            },
        ),
    ]
