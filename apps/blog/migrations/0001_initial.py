# Generated by Django 3.1.7 on 2021-11-10 22:17

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import mptt.fields
import unixtimestampfield.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_file', models.FileField(upload_to='post_file', verbose_name='Файл')),
                ('file_type', models.IntegerField(choices=[(1, 'file'), (2, 'music'), (3, 'photo'), (4, 'video')], default=1, verbose_name='Тип файла')),
            ],
            options={
                'verbose_name': 'Вложение',
                'verbose_name_plural': 'Вложения',
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reply_link', models.CharField(blank=True, max_length=150, null=True, verbose_name='Ссылка на пост')),
                ('time_to_archive', unixtimestampfield.fields.UnixTimeStampField(blank=True, null=True, verbose_name='Дата+время архивации')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Описание')),
                ('price_to_watch', models.IntegerField(default=0, verbose_name='Цена поста')),
                ('publication_date', unixtimestampfield.fields.UnixTimeStampField(auto_now_add=True, verbose_name='Дата+время создания')),
                ('enabled_comments', models.BooleanField(default=True, verbose_name='Комментарии включены')),
                ('access_level', models.IntegerField(choices=[(1, 'Покупка'), (2, 'Подписка')], default=1, verbose_name='Уровень доступа')),
                ('archived', models.BooleanField(default=False, verbose_name='Архивировано')),
                ('attachments', models.ManyToManyField(related_name='blog_posts', to='blog.Attachment', verbose_name='Вложения поста')),
                ('favourites', models.ManyToManyField(blank=True, related_name='user_favourites', to=settings.AUTH_USER_MODEL, verbose_name='Пост в избранных')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_post', to=settings.AUTH_USER_MODEL, verbose_name='Создатель поста')),
            ],
            options={
                'verbose_name': 'Публикация',
                'verbose_name_plural': 'Публикации',
                'ordering': ['-publication_date'],
            },
        ),
        migrations.CreateModel(
            name='Story',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('publication_date', unixtimestampfield.fields.UnixTimeStampField(auto_now_add=True, verbose_name='Дата время создания')),
                ('story', models.FileField(upload_to='stories', verbose_name='История')),
                ('reply_link', models.CharField(blank=True, max_length=150, null=True, verbose_name='Ссылка на историю')),
                ('time_to_archive', unixtimestampfield.fields.UnixTimeStampField(blank=True, null=True, verbose_name='Дата+время архивации')),
                ('archived', models.BooleanField(default=False, verbose_name='Архивировано')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_story', to=settings.AUTH_USER_MODEL, verbose_name='Создатель истории')),
            ],
            options={
                'verbose_name': 'История',
                'verbose_name_plural': 'Истории',
                'ordering': ['-publication_date'],
            },
        ),
        migrations.CreateModel(
            name='WatchedStories',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField(blank=True, null=True, verbose_name='Реакция на  историю')),
                ('like', models.BooleanField(default=False, verbose_name='Лайкнул')),
                ('watched', models.BooleanField(default=True, verbose_name='Просмотрел')),
                ('times_watched', models.IntegerField(default=0, verbose_name='Сколько раз посмотрел')),
                ('date_time', unixtimestampfield.fields.UnixTimeStampField(auto_now_add=True, null=True, verbose_name='Время действия')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='source_story', to='blog.story')),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='target_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'История просмотры',
                'verbose_name_plural': 'Истории просмотры',
                'ordering': ['-source__publication_date'],
                'unique_together': {('source', 'target')},
            },
        ),
        migrations.AddField(
            model_name='story',
            name='watched_story',
            field=models.ManyToManyField(through='blog.WatchedStories', to=settings.AUTH_USER_MODEL, verbose_name='Создатель истории'),
        ),
        migrations.CreateModel(
            name='PostAction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('like', models.BooleanField(default=False, verbose_name='Лайкнул')),
                ('comment', models.TextField(blank=True, null=True, verbose_name='Комментарий к посту')),
                ('donation_amount', models.IntegerField(default=0, verbose_name='Пожертвование на пост')),
                ('date_time', unixtimestampfield.fields.UnixTimeStampField(auto_now_add=True, null=True, verbose_name='Время действия')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('sub_action', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='parent_action', to='blog.postaction', verbose_name='Вложенное действие')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_postaction', to='blog.post', verbose_name='Пост')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='user_action_post', to=settings.AUTH_USER_MODEL, verbose_name='Взаимодействующий юзер')),
            ],
            options={
                'verbose_name': 'Публикация действие',
                'verbose_name_plural': 'Публикации действия',
                'ordering': ['-post__publication_date'],
            },
        ),
        migrations.CreateModel(
            name='PostBought',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.IntegerField(verbose_name='Цена покупки')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users_bought', to='blog.post', verbose_name='Купленая публикация')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bought_posts', to=settings.AUTH_USER_MODEL, verbose_name='Купивший пользователь')),
            ],
            options={
                'verbose_name': 'Купленный пост',
                'verbose_name_plural': 'Купленные посты',
                'unique_together': {('user', 'post')},
            },
        ),
    ]
